# Werker config
box: drewwells/drunken-golang@0.1.0
build:
  steps:
    - setup-go-workspace
    - script:
        name: Populate cache
        code: |
           if test -d "$WERCKER_CACHE_DIR/sprite_path"; then rsync -avz "$WERCKER_CACHE_DIR/sprite_path/" "$GOPATH"; fi
           export LIBSASS_VERSION=$(cat .libsass_version)
           if test -d "$WERCKER_CACHE_DIR/libsass_$LIBSASS_VERSION"; then rsync -avz "$WERCKER_CACHE_DIR/libsass_$LIBSASS_VERSION/" "libsass/"; fi
    - script:
        name: build libsass
        code: |
          make deps
    # Get dependencies
    - script:
        name: go get
        code: |
          rm -rf $GOPATH/src/github.com/wellington/wellington
          ln -s $WORKER_SOURCE_DIR $GOPATH/src/github.com/wellington/wellington
          go get -u github.com/wellington/spritewell
          export PKG_CONFIG_PATH=$WERCKER_SOURCE_DIR/libsass/support
          echo $PKG_CONFIG_PATH
          find $PKG_CONFIG_PATH
          cd $WERCKER_SOURCE_DIR
          go get -v -t ./...
    - script:
        name: go test
        code: |
          go test ./...
    - script:
        name: Coveralls.io
        code: |
          # The COVERALLS_TOKEN is set in the project at
          # wercker as project environment variable.
          go get github.com/axw/gocov/gocov
          go get github.com/mattn/goveralls
          go get golang.org/x/tools/cmd/goimports
          go get github.com/golang/lint/golint
          scripts/goclean.sh
          GIT_BRANCH=$WERCKER_GIT_BRANCH goveralls -coverprofile=profile.cov -service=wercker.com -repotoken $COVERALLS_TOKEN
    - script:
        name: Store cache
        code: |
          rsync -avz --exclude ".hg/" --exclude "sprite_sass/" --exclude ".git/" "$GOPATH/" "$WERCKER_CACHE_DIR/sprite_path"
          rsync -avz "$WERCKER_SOURCE_DIR/libsass/" "$WERCKER_CACHE_DIR/libsass_$LIBSASS_VERSION/"
    # Build the project
    - script:
        name: goxc build & package
        code: |
          cd $WERCKER_SOURCE_DIR/wt
          cat main.go
          rm -rf $WERCKER_OUTPUT_DIR/snapshot
          goxc -tasks='xc archive' -bc 'linux' -arch 'amd64' -d $WERCKER_OUTPUT_DIR -n wt
  # after-steps:
    # - hipchat-notify@1.0.5:
    #     token: $HIPCHAT_TOKEN
    #     room-id: 550303
    #     from-name: Wellington
deploy:
  steps:
    - script:
        name: get version
        code: |
          # create binary
          export RELEASE_TAG=$(./snapshot/linux_amd64/wt -version)
          echo $RELEASE_TAG
    - wercker/github-create-release:
        token: $GITHUB_TOKEN
        tag: $RELEASE_TAG
        #title: Sprite sass tool $APP_VERSION
        #draft: true
    - wercker/github-upload-asset:
        token: $GITHUB_TOKEN
        file: snapshot/wt_linux_amd64.tar.gz
        #filename: sprite
